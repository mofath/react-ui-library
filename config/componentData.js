module.exports = [{"name":"Icon","description":"","code":"import icons from \"./symbol-defs.svg\";\nconst config = {\n  size: \"1em\",\n};\n\nconst Icon = (props) => {\n  const { attr, size, title, ...svgProps } = props;\n  const computedSize = size || config.size;\n  let className = config.className || \"\";\n  if (props.className)\n    className = (className ? className + \" \" : \"\") + props.className;\n\n  const computedProps = Object.assign(\n    { stroke: \"currentColor\", fill: \"currentColor\", strokeWidth: \"0\" },\n    config.attr,\n    attr,\n    svgProps,\n    {\n      className: className,\n      style: Object.assign(\n        Object.assign({ color: props.color || config.color }, props.style),\n        props.style\n      ),\n      height: computedSize,\n      width: computedSize,\n      xmlns: \"http://www.w3.org/2000/svg\",\n    }\n  );\n\n  return (\n    <svg version=\"1.1\" {...computedProps}>\n      {props.iconTitle ? <title>{props.iconTitle}</title> : null}\n      <use xlinkHref={`${icons}#${props.icon}`} />\n    </svg>\n  );\n};\n\nexport default Icon;\n","examples":[]},{"name":"ImageSlider","description":"","code":"import React, { useState } from \"react\";\n// import { FaArrowAltCircleRight, FaArrowAltCircleLeft } from \"react-icons/fa\";\nimport \"./image-slider.css\";\n\nconst ImageSlider = ({ slides }) => {\n  const [current, setCurrent] = useState(0);\n  const length = slides.length;\n\n  const nextSlide = () => setCurrent(current === length - 1 ? 0 : current + 1);\n  const prevSlide = () => setCurrent(current === 0 ? length - 1 : current - 1);\n\n  if (!Array.isArray(slides) || slides.length <= 0) return null;\n\n  return (\n    <div className=\"slider\">\n      {/* <FaArrowAltCircleLeft className=\"left-arrow\" onClick={prevSlide} /> */}\n      {/* <FaArrowAltCircleRight className=\"right-arrow\" onClick={nextSlide} /> */}\n\n      <button className=\"left-arrow\" onClick={prevSlide}>Prev</button>\n      <button className=\"right-arrow\" onClick={nextSlide}>Next</button>\n\n      \n      {slides.map((slide, index) => (\n        <div\n          className={index === current ? \"slide active\" : \"slide\"}\n          key={index}\n        >\n          {index === current && (\n            <img src={slide.image} alt=\"img\" className=\"image\" />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ImageSlider;\n","examples":[]},{"name":"Label","description":"","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":""},"label":{"type":{"name":"string"},"required":true,"description":""},"required":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Label = ({ htmlFor, label, required }) => {\n  return (\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\n      {label} {required && <span style={{ color: \"red\" }}> *</span>}\n    </label>\n  );\n};\n\nLabel.propTypes = {\n  htmlFor: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n};\n\nexport default Label;\n","examples":[]},{"name":"ProductCard","description":"","code":"import React, { useState, useRef } from \"react\";\nimport { productData } from \"./product-card-data\";\nimport \"./index.scss\";\n\nconst ProductCard = () => {\n  const [selectedColor, setSelectedColor] = useState(productData.defaultColor);\n  const [selectedSize, setSelectedSize] = useState(null);\n  const SizesDropdownRef = useRef(null);\n\n  const expandSizeDropdown = () => {\n    SizesDropdownRef.current.classList.contains(\"is-expanded\") ||\n      SizesDropdownRef.current.classList.add(\"is-expanded\");\n  };\n\n  const collapseSizeDropdown = () => {\n    SizesDropdownRef.current.classList.remove(\"is-expanded\") \n  };\n\n  const selectColor = (color) => {\n    setSelectedColor(color);\n  };\n\n  const selectSize = (event, size) => {\n    event.stopPropagation();\n    event.nativeEvent.stopImmediatePropagation();\n    collapseSizeDropdown();\n    setSelectedSize(size);\n  };\n\n  return (\n    <div className=\"product-card\">\n      <div className=\"figure\">\n        <img\n          src={`/images/${productData.colors[selectedColor].images[0]}.jpg`}\n          alt=\"product\"\n        />\n        <img\n          src={`/images/${productData.colors[selectedColor].images[1]}.jpg`}\n          className=\"img-top\"\n          alt=\"product\"\n        />\n        <div className=\"overlay\">\n          <div className=\"quick-add\">\n            <div className=\"size-dropdown\">\n              <div\n                className=\"box\"\n                onMouseEnter={expandSizeDropdown}\n                onMouseLeave={collapseSizeDropdown}\n              >\n                <div className=\"sizes\" ref={SizesDropdownRef}>\n                  <div className=\"size-placeholder\">\n                    {selectedSize || \"SIZE\"}\n                  </div>\n                  <div className=\"sizes-box\">\n                    {Object.keys(productData.colors[selectedColor].sizes).map(\n                      (size) => (\n                        <div\n                          className=\"size-item\"\n                          disabled={!productData.colors[selectedColor].sizes[size]}\n                          key={size}\n                          onClick={(event) => selectSize(event, size)}\n                        >\n                          {size}\n                        </div>\n                      )\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"product-info\">\n        <div className=\"name\">{productData.name}</div>\n        <div className=\"price\">{productData.price}&nbsp;EGP</div>\n        <div className=\"color-set\">\n          {Object.keys(productData.colors).map((color, index) => {\n            const currentColor = productData.colors[color];\n            return (\n              <div\n                className={[\"color-item\", selectedColor === color && \"is-selected\",].join(\" \")}\n                key={color}\n                onClick={() => selectColor(color)}\n              >\n                <div\n                  className=\"color-box\"\n                  style={{ backgroundColor: currentColor.colorCode }}\n                ></div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductCard;\n","examples":[]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":""},"width":{"type":{"name":"number"},"required":true,"description":""},"height":{"type":{"name":"number"},"required":true,"description":""}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ProgressBar = (props) => {\n  const getColor = (precent) => {\n    if (props.percent === 1000) return \"green\";\n    return props.percent > 50 ? \"lightgreen\" : \"red\";\n  };\n\n  const getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(props.width * (props.percent / 100), 10);\n  };\n\n  return <div style={{ border: \"solid 1px lightgray\", width: width }}>\n      <div style={{\n          width: getWidthAsPercentOfTotalWidth(),\n          height: props.height,\n          backgroundColor: getColor(props.percent)\n      }}></div>\n  </div>;\n};\n\nProgressBar.propTypes = {\n    percent: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n}\n\nProgressBar.defaulProps = {\n    height: 5,\n}\n\nexport default ProgressBar;\n","examples":[]}]